@page "/usuarios/editar/{id:int}"
@rendermode InteractiveServer
@using CorridaClub.Controllers
@using CorridaClub.Models
@inject UsuarioController UsuarioController
@inject NavigationManager Navigation
@implements IDisposable

<div class="home-container">
    <div class="home-card">
        <div class="header">
            <h1>Editar <span class="highlight">Usuário</span></h1>
            <p class="subtitle">Atualize os dados do usuário abaixo</p>
        </div>

        @if (usuario == null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="sr-only">Carregando...</span>
                </div>
                <p class="mt-2">Carregando usuário...</p>
            </div>
        }
        else
        {
            @if (!string.IsNullOrEmpty(mensagemErro))
            {
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-circle mr-2"></i> @mensagemErro
                </div>
            }

            <div class="form-container">
                <div class="form-row">
                    <div class="form-group">
                        <label>Nome Completo:</label>
                        <input @bind="usuario.Nome" class="form-control @(erros.ContainsKey("Nome") ? "is-invalid" : "")"
                               placeholder="Digite o nome completo" />
                        @if (erros.ContainsKey("Nome"))
                        {
                            <div class="invalid-feedback">@erros["Nome"]</div>
                        }
                    </div>

                    <div class="form-group">
                        <label>Email:</label>
                        <input @bind="usuario.Email" class="form-control @(erros.ContainsKey("Email") ? "is-invalid" : "")"
                               placeholder="Digite o email" />
                        @if (erros.ContainsKey("Email"))
                        {
                            <div class="invalid-feedback">@erros["Email"]</div>
                        }
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label>Senha (deixe em branco para manter):</label>
                        <input @bind="novaSenha" type="password"
                               class="form-control @(erros.ContainsKey("Senha") ? "is-invalid" : "")"
                               placeholder="Nova senha (mínimo 8 caracteres)" />
                        @if (erros.ContainsKey("Senha"))
                        {
                            <div class="invalid-feedback">@erros["Senha"]</div>
                        }
                    </div>

                    <div class="form-group">
                        <label>Confirmar Senha:</label>
                        <input @bind="confirmacaoSenha" type="password"
                               class="form-control @(erros.ContainsKey("ConfirmacaoSenha") ? "is-invalid" : "")"
                               placeholder="Confirme a nova senha" />
                        @if (erros.ContainsKey("ConfirmacaoSenha"))
                        {
                            <div class="invalid-feedback">@erros["ConfirmacaoSenha"]</div>
                        }
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label>Telefone:</label>
                        <input @bind="usuario.Telefone" @oninput="FormatarTelefone"
                               class="form-control @(erros.ContainsKey("Telefone") ? "is-invalid" : "")"
                               placeholder="(00) 00000-0000" />
                        @if (erros.ContainsKey("Telefone"))
                        {
                            <div class="invalid-feedback">@erros["Telefone"]</div>
                        }
                    </div>

                    <div class="form-group">
                        <label>Data de Nascimento:</label>
                        <input @bind="usuario.DataNascimento" type="date"
                               class="form-control @(erros.ContainsKey("DataNascimento") ? "is-invalid" : "")"
                               max="@DateTime.Now.ToString("yyyy-MM-dd")" />
                        @if (erros.ContainsKey("DataNascimento"))
                        {
                            <div class="invalid-feedback">@erros["DataNascimento"]</div>
                        }
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label>Gênero:</label>
                        <select @bind="usuario.Genero" class="form-control @(erros.ContainsKey("Genero") ? "is-invalid" : "")">
                            <option value="">Selecione...</option>
                            <option value="Masculino">Masculino</option>
                            <option value="Feminino">Feminino</option>
                            <option value="Outro">Outro</option>
                        </select>
                        @if (erros.ContainsKey("Genero"))
                        {
                            <div class="invalid-feedback">@erros["Genero"]</div>
                        }
                    </div>

                    <div class="form-group">
                        <label>Tipo de Membro:</label>
                        <select @bind="usuario.TipoMembro" class="form-control @(erros.ContainsKey("TipoMembro") ? "is-invalid" : "")">
                            <option value="">Selecione...</option>
                            <option value="Atleta">Atleta</option>
                            <option value="Organizador">Organizador</option>
                            <option value="Admin">Administrador</option>
                        </select>
                        @if (erros.ContainsKey("TipoMembro"))
                        {
                            <div class="invalid-feedback">@erros["TipoMembro"]</div>
                        }
                    </div>
                </div>

                <div class="action-buttons">
                    <button class="action-btn" @onclick="AtualizarUsuario" disabled="@salvando">
                        @if (salvando)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span>Atualizando...</span>
                        }
                        else
                        {
                            <span class="btn-icon">💾</span>
                            <span class="btn-text">@(erros.Count > 0 ? "Corrija os erros" : "Salvar Alterações")</span>
                        }
                    </button>
                    <a href="/usuarios" class="action-btn cancel-btn">
                        <span class="btn-icon">❌</span>
                        <span class="btn-text">Cancelar</span>
                    </a>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .home-container {
        background-color: var(--background);
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 2rem 0;
    }

    .home-card {
        background-color: white;
        border-radius: 16px;
        padding: 3rem;
        box-shadow: 0 10px 30px rgba(230, 81, 0, 0.15);
        max-width: 900px;
        width: 100%;
    }

    .header h1 {
        color: var(--primary-color);
        font-size: 2.5rem;
        margin-bottom: 1rem;
        font-weight: 700;
    }

    .highlight {
        color: var(--secondary-color);
        font-weight: 800;
    }

    .subtitle {
        color: var(--text-dark);
        font-size: 1.2rem;
        opacity: 0.9;
        margin-bottom: 2rem;
    }

    .form-container {
        margin-top: 1.5rem;
    }

    .form-row {
        display: flex;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .form-group {
        flex: 1;
        margin-bottom: 1rem;
    }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: var(--text-dark);
        }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 8px;
        font-size: 1rem;
    }

    .is-invalid {
        border-color: #dc3545;
    }

    .invalid-feedback {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .action-buttons {
        display: flex;
        gap: 1.5rem;
        margin-top: 2rem;
        flex-wrap: wrap;
    }

    .action-btn {
        background-color: var(--secondary-color);
        color: white;
        text-decoration: none;
        padding: 1.2rem 1.5rem;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(251, 140, 0, 0.3);
        border: none;
        cursor: pointer;
        min-width: 180px;
    }

        .action-btn:hover {
            background-color: white;
            color: var(--secondary-color);
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(251, 140, 0, 0.4);
            border: 2px solid var(--secondary-color);
        }

    .cancel-btn {
        background-color: #6c757d;
        box-shadow: 0 4px 12px rgba(108, 117, 125, 0.3);
    }

        .cancel-btn:hover {
            background-color: white;
            color: #6c757d;
            border: 2px solid #6c757d;
        }

    .btn-icon {
        font-size: 1.5rem;
        margin-right: 0.8rem;
    }

    .btn-text {
        font-size: 1.1rem;
        font-weight: 600;
    }
</style>

@code {
    [Parameter]
    public int Id { get; set; }

    private Usuario usuario;
    private string novaSenha = string.Empty;
    private string confirmacaoSenha = string.Empty;
    private bool salvando = false;
    private string mensagemErro = string.Empty;
    private Dictionary<string, string> erros = new Dictionary<string, string>();
    private DotNetObjectReference<Editar>? objRef;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            usuario = await UsuarioController.ObterPorId(Id);
            if (usuario == null)
            {
                mensagemErro = "Usuário não encontrado.";
            }
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro ao carregar usuário: {ex.Message}";
        }
    }

    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    private async Task AtualizarUsuario()
    {
        salvando = true;
        erros.Clear();
        mensagemErro = string.Empty;

        // Validações
        ValidarCampos();

        if (erros.Count == 0)
        {
            try
            {
                // Atualiza a senha apenas se foi informada uma nova
                if (!string.IsNullOrWhiteSpace(novaSenha))
                {
                    usuario.Senha = novaSenha;
                }

                await UsuarioController.Atualizar(usuario);
                Navigation.NavigateTo("/usuarios");
            }
            catch (Exception ex)
            {
                mensagemErro = $"Erro ao atualizar usuário: {ex.Message}";
                Console.WriteLine(mensagemErro);
            }
        }
        else
        {
            mensagemErro = "Corrija os erros antes de atualizar.";
        }

        salvando = false;
        StateHasChanged();
    }

    private void ValidarCampos()
    {
        if (string.IsNullOrWhiteSpace(usuario.Nome))
        {
            erros["Nome"] = "O nome é obrigatório.";
        }
        else if (usuario.Nome.Length < 3)
        {
            erros["Nome"] = "O nome deve ter pelo menos 3 caracteres.";
        }

        if (string.IsNullOrWhiteSpace(usuario.Email))
        {
            erros["Email"] = "O email é obrigatório.";
        }
        else if (!usuario.Email.Contains("@") || !usuario.Email.Contains("."))
        {
            erros["Email"] = "Informe um email válido.";
        }

        if (string.IsNullOrWhiteSpace(usuario.Telefone))
        {
            erros["Telefone"] = "O telefone é obrigatório.";
        }
        else if (usuario.Telefone.Replace("(", "").Replace(")", "").Replace("-", "").Replace(" ", "").Length < 10)
        {
            erros["Telefone"] = "Informe um telefone válido.";
        }

        if (usuario.DataNascimento == default)
        {
            erros["DataNascimento"] = "A data de nascimento é obrigatória.";
        }
        else if (usuario.DataNascimento > DateTime.Now.AddYears(-12))
        {
            erros["DataNascimento"] = "O usuário deve ter pelo menos 12 anos.";
        }

        if (string.IsNullOrWhiteSpace(usuario.Genero))
        {
            erros["Genero"] = "O gênero é obrigatório.";
        }

        if (string.IsNullOrWhiteSpace(usuario.TipoMembro))
        {
            erros["TipoMembro"] = "O tipo de membro é obrigatório.";
        }

        if (!string.IsNullOrWhiteSpace(novaSenha))
        {
            if (novaSenha.Length < 8)
            {
                erros["Senha"] = "A senha deve ter pelo menos 8 caracteres.";
            }
            else if (novaSenha != confirmacaoSenha)
            {
                erros["ConfirmacaoSenha"] = "As senhas não coincidem.";
            }
        }
    }

    private void FormatarTelefone(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? string.Empty;
        var digits = new string(input.Where(char.IsDigit).ToArray());

        if (digits.Length > 11)
        {
            digits = digits[..11];
        }

        string formatted = digits;
        if (digits.Length > 0)
        {
            formatted = digits.Length <= 2 ?
                $"({digits}" :
                digits.Length <= 7 ?
                $"({digits[..2]}) {digits[2..]}" :
                $"({digits[..2]}) {digits[2..7]}-{digits[7..]}";
        }

        usuario.Telefone = formatted;

        StateHasChanged();
    }
}