@page "/usuarios"
@rendermode InteractiveServer
@using CorridaClub.Controllers
@using CorridaClub.Models
@inject UsuarioController UsuarioController
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="mb-0"><i class="fas fa-users mr-2"></i> Lista de Usuários</h3>
        <a href="/usuarios/criar" class="btn btn-primary">
            <i class="fas fa-user-plus mr-2"></i> Novo Usuário
        </a>
    </div>

    @if (usuarios == null)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Carregando...</span>
            </div>
            <p class="mt-2">Carregando usuários...</p>
        </div>
    }
    else if (!usuarios.Any())
    {
        <div class="alert alert-info">
            <i class="fas fa-info-circle mr-2"></i> Nenhum usuário cadastrado.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th>Nome</th>
                        <th>Email</th>
                        <th>Tipo</th>
                        <th class="text-right">Ações</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var usuario in usuarios)
                    {
                        <tr>
                            <td>@usuario.Nome</td>
                            <td>@usuario.Email</td>
                            <td>@usuario.TipoMembro</td>
                            <td class="text-right">
                                <div class="btn-group" role="group">
                                    <a href="/usuarios/detalhes/@usuario.Id" class="btn btn-info btn-sm">
                                        <i class="fas fa-eye mr-1"></i> Detalhes
                                    </a>
                                    <a href="/usuarios/editar/@usuario.Id" class="btn btn-warning btn-sm">
                                        <i class="fas fa-edit mr-1"></i> Editar
                                    </a>
                                    <button @onclick="@(async () => await ConfirmarRemocao(usuario.Id))" 
                                            class="btn btn-danger btn-sm">
                                        <i class="fas fa-trash-alt mr-1"></i> Remover
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    @if (!string.IsNullOrEmpty(mensagemErro))
    {
        <div class="alert alert-danger mt-3">
            <i class="fas fa-exclamation-circle mr-2"></i> @mensagemErro
        </div>
    }
</div>

@code {
    private List<Usuario> usuarios;
    private string mensagemErro = string.Empty;
    private bool removendo = false;

    protected override async Task OnInitializedAsync()
    {
        await CarregarUsuarios();
    }

    private async Task CarregarUsuarios()
    {
        try
        {
            usuarios = await UsuarioController.ListarUsuarios();
            mensagemErro = string.Empty;
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro ao carregar usuários: {ex.Message}";
        }
    }

    private async Task ConfirmarRemocao(int id)
    {
        var usuario = usuarios.FirstOrDefault(u => u.Id == id);
        if (usuario == null) return;

        var confirmado = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Tem certeza que deseja remover o usuário {usuario.Nome}? Esta ação não pode ser desfeita.");
        
        if (confirmado)
        {
            await RemoverUsuario(id);
        }
    }

    private async Task RemoverUsuario(int id)
    {
        removendo = true;
        try
        {
            await UsuarioController.Remover(id);
            await CarregarUsuarios();
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro ao remover usuário: {ex.Message}";
        }
        finally
        {
            removendo = false;
        }
    }
}