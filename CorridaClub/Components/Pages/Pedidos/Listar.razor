@page "/pedidos"
@rendermode InteractiveServer
@using CorridaClub.Controllers
@using CorridaClub.Models
@inject PedidoController PedidoController
@inject UsuarioController UsuarioController
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="home-container">
    <div class="home-card">
        <div class="header">
            <h1>Lista de <span class="highlight">Pedidos</span></h1>
            <p class="subtitle">Gerencie os pedidos do sistema</p>
        </div>

        <div class="action-buttons">
            <a href="/pedidos/criar" class="action-btn">
                <span class="btn-icon">➕</span>
                <span class="btn-text">Novo Pedido</span>
            </a>
        </div>

        <!-- Filtros -->
        <div class="filter-container">
            <div class="filter-row">
                <div class="filter-group">
                    <label>Item:</label>
                    <select @bind="filtroItem" class="filter-select">
                        <option value="">Todos os Itens</option>
                        <option value="Camiseta">Camiseta</option>
                        <option value="Tênis">Tênis</option>
                        <option value="Medalha">Medalha</option>
                        <option value="Kit Corrida">Kit Corrida</option>
                    </select>
                </div>
                
                <div class="filter-group">
                    <label>Status:</label>
                    <select @bind="filtroStatus" class="filter-select">
                        <option value="">Todos</option>
                        <option value="Pendente">Pendente</option>
                        <option value="Processando">Processando</option>
                        <option value="Enviado">Enviado</option>
                        <option value="Entregue">Entregue</option>
                        <option value="Cancelado">Cancelado</option>
                    </select>
                </div>
                
                <div class="filter-group">
                    <label>Cliente:</label>
                    <select @bind="filtroUsuarioId" class="filter-select">
                        <option value="0">Todos os Clientes</option>
                        @foreach (var usuario in usuariosDisponiveis)
                        {
                            <option value="@usuario.Id">@usuario.Nome</option>
                        }
                    </select>
                </div>
                
                <div class="filter-group">
                    <label>Período:</label>
                    <select @bind="filtroPeriodo" class="filter-select">
                        <option value="7">Últimos 7 dias</option>
                        <option value="30">Últimos 30 dias</option>
                        <option value="90">Últimos 3 meses</option>
                        <option value="0">Todos</option>
                    </select>
                </div>
                
                <button @onclick="AplicarFiltros" class="filter-btn">
                    <span class="btn-icon">🔍</span>
                    <span class="btn-text">Filtrar</span>
                </button>
            </div>
        </div>

        @if (carregando)
        {
            <div class="loading-spinner">
                <div class="spinner"></div>
                <p>Carregando pedidos...</p>
            </div>
        }
        else if (!carregando && !pedidosFiltrados.Any())
        {
            <div class="empty-state">
                <span class="btn-icon">📦</span>
                <p>Nenhum pedido encontrado @(filtroItem != "" || filtroStatus != "" || filtroUsuarioId > 0 || filtroPeriodo != 7 ? "com os filtros atuais" : "")</p>
            </div>
        }
        else
        {
            <div class="table-container">
                <table class="user-table">
                    <thead>
                        <tr>
                            <th>Item</th>
                            <th>Cliente</th>
                            <th>Tamanho</th>
                            <th>Quantidade</th>
                            <th>Status</th>
                            <th>Data</th>
                            <th class="actions-header">Ações</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var pedido in GetPedidosPagina())
                        {
                            <tr>
                                <td class="item-cell">@pedido.Item</td>
                                <td class="cliente-cell">
                                    <div class="cliente-info">
                                        <div class="cliente-nome">@pedido.Usuario?.Nome</div>
                                        <small class="text-muted">@pedido.Usuario?.Email</small>
                                    </div>
                                </td>
                                <td class="tamanho-cell">@pedido.Tamanho</td>
                                <td class="quantidade-cell">@pedido.Quantidade</td>
                                <td class="status-cell">
                                    <span class="status-badge @GetStatusClass(pedido.Status ?? string.Empty)">
                                        @pedido.Status
                                    </span>
                                </td>
                                <td class="data-cell">@($"{pedido.DataPedido:dd/MM/yyyy}")</td>
                                <td class="actions-cell">
                                    <div class="actions">
                                        <a href="/pedidos/detalhes/@pedido.Id" class="table-btn info" title="Detalhes">
                                            <span class="btn-icon">👁️</span>
                                        </a>
                                        @if (pedido.Status != "Cancelado" && pedido.Status != "Entregue")
                                        {
                                            <button @onclick="@(() => ConfirmarCancelamento(pedido.Id))"
                                                    class="table-btn danger"
                                                    title="Cancelar">
                                                <span class="btn-icon">🗑️</span>
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            @if (totalPaginas > 1)
            {
                <div class="pagination">
                    <button @onclick="@(() => MudarPagina(1))" disabled="@(paginaAtual == 1)" class="pagination-btn">
                        <span class="btn-icon">⏮️</span>
                    </button>
                    <button @onclick="@(() => MudarPagina(paginaAtual - 1))" disabled="@(paginaAtual == 1)" class="pagination-btn">
                        <span class="btn-icon">◀️</span>
                    </button>

                    @for (int i = Math.Max(1, paginaAtual - 2); i <= Math.Min(totalPaginas, paginaAtual + 2); i++)
                    {
                        <button @onclick="@(() => MudarPagina(i))" class="pagination-btn @(i == paginaAtual ? "active" : "")">
                            @i
                        </button>
                    }

                    <button @onclick="@(() => MudarPagina(paginaAtual + 1))" disabled="@(paginaAtual == totalPaginas)" class="pagination-btn">
                        <span class="btn-icon">▶️</span>
                    </button>
                    <button @onclick="@(() => MudarPagina(totalPaginas))" disabled="@(paginaAtual == totalPaginas)" class="pagination-btn">
                        <span class="btn-icon">⏭️</span>
                    </button>
                </div>
            }
        }

        @if (!string.IsNullOrEmpty(mensagemErro))
        {
            <div class="alert alert-danger">
                <span class="btn-icon">⚠️</span> @mensagemErro
            </div>
        }
    </div>
</div>

<style>
    .home-container {
        background-color: var(--background);
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 2rem 0;
    }

    .home-card {
        background-color: white;
        border-radius: 16px;
        padding: 3rem;
        box-shadow: 0 10px 30px rgba(230, 81, 0, 0.15);
        max-width: 1200px;
        width: 100%;
    }

    .header h1 {
        color: var(--primary-color);
        font-size: 2.5rem;
        margin-bottom: 1rem;
        font-weight: 700;
    }

    .highlight {
        color: var(--secondary-color);
        font-weight: 800;
    }

    .subtitle {
        color: var(--text-dark);
        font-size: 1.2rem;
        opacity: 0.9;
        margin-bottom: 2rem;
    }

    .action-buttons {
        display: flex;
        justify-content: flex-end;
        margin-bottom: 2rem;
    }

    .action-btn {
        display: inline-flex;
        align-items: center;
        padding: 0.75rem 1.5rem;
        background-color: var(--primary-color);
        color: white;
        border-radius: 8px;
        text-decoration: none;
        font-weight: 600;
        transition: all 0.2s;
    }

    .action-btn:hover {
        background-color: var(--secondary-color);
        transform: translateY(-2px);
    }

    /* Filtros */
    .filter-container {
        margin-bottom: 2rem;
    }

    .filter-row {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        align-items: flex-end;
    }

    .filter-group {
        flex: 1;
        min-width: 200px;
    }

    .filter-group label {
        display: block;
        margin-bottom: 0.5rem;
        color: var(--text-dark);
        font-weight: 500;
    }

    .filter-select {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: white;
        transition: all 0.2s;
    }

    .filter-select:focus {
        border-color: var(--primary-color);
        outline: none;
        box-shadow: 0 0 0 3px rgba(230, 81, 0, 0.1);
    }

    .filter-btn {
        display: inline-flex;
        align-items: center;
        padding: 0.75rem 1.5rem;
        background-color: var(--primary-color);
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
        height: 42px;
    }

    .filter-btn:hover {
        background-color: var(--secondary-color);
        transform: translateY(-2px);
    }

    .table-container {
        overflow-x: auto;
        margin-top: 1.5rem;
    }

    .user-table {
        width: 100%;
        border-collapse: collapse;
    }

    .user-table th {
        background-color: var(--primary-color);
        color: white;
        padding: 1rem;
        text-align: left;
    }

    .user-table td {
        padding: 1rem;
        border-bottom: 1px solid #eee;
    }

    .user-table tr:hover {
        background-color: #f9f9f9;
    }

    .actions {
        display: flex;
        gap: 0.5rem;
    }

    .table-btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 36px;
        height: 36px;
        border-radius: 50%;
        border: none;
        cursor: pointer;
        transition: all 0.2s;
    }

    .table-btn:hover {
        transform: scale(1.1);
    }

    .info {
        background-color: #17a2b8;
        color: white;
    }

    .danger {
        background-color: #dc3545;
        color: white;
    }

    /* Status badges */
    .status-badge {
        display: inline-block;
        padding: 0.35rem 0.75rem;
        border-radius: 50px;
        font-size: 0.85rem;
        font-weight: 600;
    }

    .status-pendente {
        background-color: #ffc107;
        color: #000;
    }

    .status-processando {
        background-color: #0dcaf0;
        color: #000;
    }

    .status-enviado {
        background-color: #0d6efd;
        color: #fff;
    }

    .status-entregue {
        background-color: #198754;
        color: #fff;
    }

    .status-cancelado {
        background-color: #dc3545;
        color: #fff;
    }

    /* Paginação */
    .pagination {
        display: flex;
        justify-content: center;
        gap: 0.5rem;
        margin-top: 2rem;
    }

    .pagination-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        border-radius: 8px;
        border: 1px solid #ddd;
        background-color: white;
        cursor: pointer;
        transition: all 0.2s;
    }

    .pagination-btn:hover:not(:disabled) {
        background-color: #f5f5f5;
    }

    .pagination-btn.active {
        background-color: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
    }

    .pagination-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    /* Estados */
    .empty-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 2rem;
        color: var(--text-dark);
    }

    .empty-state .btn-icon {
        font-size: 2rem;
        margin-bottom: 1rem;
    }

    .loading-spinner {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 2rem;
    }

    .spinner {
        border: 4px solid rgba(0, 0, 0, 0.1);
        border-radius: 50%;
        border-top: 4px solid var(--primary-color);
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin-bottom: 1rem;
    }

    .alert {
        padding: 1rem;
        border-radius: 8px;
        margin-top: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }

    .text-muted {
        color: #6c757d;
        font-size: 0.85rem;
        display: block;
    }
</style>

@code {
    private List<Pedido> pedidos = new();
    private List<Pedido> pedidosFiltrados = new();
    private List<Usuario> usuariosDisponiveis = new();
    private bool carregando = true;
    private string mensagemErro = string.Empty;

    // Filtros
    private string filtroItem = "";
    private string filtroStatus = "";
    private int filtroUsuarioId = 0;
    private int filtroPeriodo = 7;

    // Paginação
    private int paginaAtual = 1;
    private const int itensPorPagina = 10;
    private int totalPaginas = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CarregarDados();
            pedidosFiltrados = pedidos.OrderByDescending(p => p.DataPedido).ToList();
            totalPaginas = (int)Math.Ceiling((double)pedidosFiltrados.Count / itensPorPagina);
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro ao carregar pedidos: {ex.Message}";
        }
        finally
        {
            carregando = false;
        }
    }

    private async Task CarregarDados()
    {
        pedidos = await PedidoController.ListarTodosPedidos();
        usuariosDisponiveis = await UsuarioController.ListarUsuarios();
    }

    private async Task AplicarFiltros()
    {
        carregando = true;
        StateHasChanged();

        try
        {
            var query = pedidos.AsQueryable();

            if (!string.IsNullOrEmpty(filtroItem))
            {
                query = query.Where(p => p.Item == filtroItem);
            }

            if (!string.IsNullOrEmpty(filtroStatus))
            {
                query = query.Where(p => p.Status == filtroStatus);
            }

            if (filtroUsuarioId > 0)
            {
                query = query.Where(p => p.UsuarioId == filtroUsuarioId);
            }

            if (filtroPeriodo > 0)
            {
                var dataLimite = DateTime.Now.AddDays(-filtroPeriodo);
                query = query.Where(p => p.DataPedido >= dataLimite);
            }

            pedidosFiltrados = query
                .OrderByDescending(p => p.DataPedido)
                .ToList();

            totalPaginas = (int)Math.Ceiling((double)pedidosFiltrados.Count / itensPorPagina);
            paginaAtual = 1;
        }
        finally
        {
            carregando = false;
        }
    }

    private IEnumerable<Pedido> GetPedidosPagina()
    {
        return pedidosFiltrados
            .Skip((paginaAtual - 1) * itensPorPagina)
            .Take(itensPorPagina);
    }

    private void MudarPagina(int pagina)
    {
        paginaAtual = pagina;
    }

    private async Task ConfirmarCancelamento(int pedidoId)
    {
        var confirmado = await JSRuntime.InvokeAsync<bool>("confirm",
            "Tem certeza que deseja cancelar este pedido?");

        if (confirmado)
        {
            await CancelarPedido(pedidoId);
        }
    }

    private async Task CancelarPedido(int pedidoId)
    {
        try
        {
            carregando = true;
            await PedidoController.CancelarPedido(pedidoId);
            await CarregarDados();
            await AplicarFiltros();
            mensagemErro = string.Empty;
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro ao cancelar pedido: {ex.Message}";
        }
        finally
        {
            carregando = false;
        }
    }

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Pendente" => "status-pendente",
            "Processando" => "status-processando",
            "Enviado" => "status-enviado",
            "Entregue" => "status-entregue",
            "Cancelado" => "status-cancelado",
            _ => "status-pendente"
        };
    }
}