@page "/pedidos"
@rendermode InteractiveServer
@using CorridaClub.Controllers
@using CorridaClub.Models
@inject PedidoController PedidoController
@inject UsuarioController UsuarioController
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="mb-0"><i class="fas fa-shopping-cart mr-2"></i> LISTA DE PEDIDOS</h1>
        <a href="/pedidos/criar" class="btn btn-primary">
            <i class="fas fa-plus mr-2"></i> Novo Pedido
        </a>
    </div>

    <!-- Filtros -->
    <div class="card mb-4 shadow-sm">
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <div class="form-group">
                        <label>Filtrar por Item:</label>
                        <select @bind="filtroItem" class="form-control">
                            <option value="">Todos os Itens</option>
                            <option value="Camiseta">Camiseta</option>
                            <option value="Tênis">Tênis</option>
                            <option value="Medalha">Medalha</option>
                            <option value="Kit Corrida">Kit Corrida</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        <label>Filtrar por Status:</label>
                        <select @bind="filtroStatus" class="form-control">
                            <option value="">Todos</option>
                            <option value="Pendente">Pendente</option>
                            <option value="Processando">Processando</option>
                            <option value="Enviado">Enviado</option>
                            <option value="Entregue">Entregue</option>
                            <option value="Cancelado">Cancelado</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        <label>Filtrar por Cliente:</label>
                        <select @bind="filtroUsuarioId" class="form-control">
                            <option value="0">Todos os Clientes</option>
                            @foreach (var usuario in usuariosDisponiveis)
                            {
                                <option value="@usuario.Id">@usuario.Nome</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        <label>Período:</label>
                        <select @bind="filtroPeriodo" class="form-control">
                            <option value="7">Últimos 7 dias</option>
                            <option value="30">Últimos 30 dias</option>
                            <option value="90">Últimos 3 meses</option>
                            <option value="0">Todos</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (carregando)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Carregando...</span>
            </div>
            <p class="mt-2">Carregando pedidos...</p>
        </div>
    }
    else if (!carregando && !pedidosFiltrados.Any())
    {
        <div class="alert alert-info">
            <i class="fas fa-info-circle mr-2"></i> Nenhum pedido encontrado @(filtroItem != "" || filtroStatus != "" ||
                    filtroUsuarioId > 0 || filtroPeriodo != 7 ? "com os filtros atuais" : "")
        </div>
    }
    else
    {
        <div class="card shadow">
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-striped table-hover mb-0">
                        <thead class="thead-light">
                            <tr>
                                <th>Item</th>
                                <th>Cliente</th>
                                <th>Tamanho</th>
                                <th>Quantidade</th>
                                <th>Status</th>
                                <th>Data</th>
                                <th class="text-right">Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var pedido in GetPedidosPagina())
                            {
                                <tr>
                                    <td>@pedido.Item</td>
                                    <td>
                                        @pedido.Usuario?.Nome
                                        <small class="text-muted d-block">@pedido.Usuario?.Email</small>
                                    </td>
                                    <td>@pedido.Tamanho</td>
                                    <td>@pedido.Quantidade</td>
                                    <td>
                                        <span class="badge @GetBadgeClass(pedido.Status ?? string.Empty)">
                                            @pedido.Status
                                        </span>
                                    </td>
                                    <td>@($"{pedido.DataPedido:dd/MM/yyyy}")</td>
                                    <td class="text-right">
                                        <div class="btn-group btn-group-sm" role="group">
                                            <a href="/pedidos/detalhes/@pedido.Id" class="btn btn-info" title="Detalhes">
                                                <i class="fas fa-eye mr-1"></i> Detalhes
                                            </a>
                                            @if (pedido.Status != "Cancelado" && pedido.Status != "Entregue")
                                            {
                                                <button @onclick="@(() => ConfirmarCancelamento(pedido.Id))" class="btn btn-danger"
                                                    title="Cancelar">
                                                    <i class="fas fa-ban mr-1"></i> Cancelar
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Paginação -->
        @if (totalPaginas > 1)
        {
            <div class="d-flex justify-content-center mt-3">
                <nav>
                    <ul class="pagination">
                        <li class="page-item @(paginaAtual == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="@(() => MudarPagina(1))">
                                <i class="fas fa-angle-double-left"></i>
                            </button>
                        </li>
                        <li class="page-item @(paginaAtual == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="@(() => MudarPagina(paginaAtual - 1))">
                                <i class="fas fa-angle-left"></i>
                            </button>
                        </li>

                        @for (int i = Math.Max(1, paginaAtual - 2); i <= Math.Min(totalPaginas, paginaAtual + 2); i++)
                        {
                            <li class="page-item @(i == paginaAtual ? "active" : "")">
                                <button class="page-link" @onclick="@(() => MudarPagina(i))">@i</button>
                            </li>
                        }

                        <li class="page-item @(paginaAtual == totalPaginas ? "disabled" : "")">
                            <button class="page-link" @onclick="@(() => MudarPagina(paginaAtual + 1))">
                                <i class="fas fa-angle-right"></i>
                            </button>
                        </li>
                        <li class="page-item @(paginaAtual == totalPaginas ? "disabled" : "")">
                            <button class="page-link" @onclick="@(() => MudarPagina(totalPaginas))">
                                <i class="fas fa-angle-double-right"></i>
                            </button>
                        </li>
                    </ul>
                </nav>
            </div>
        }
    }

    @if (!string.IsNullOrEmpty(mensagemErro))
    {
        <div class="alert alert-danger mt-3">
            <i class="fas fa-exclamation-circle mr-2"></i> @mensagemErro
        </div>
    }
</div>

@code {
    private List<Pedido> pedidos = new();
    private List<Pedido> pedidosFiltrados = new();
    private List<Usuario> usuariosDisponiveis = new();
    private bool carregando = true;
    private string mensagemErro = string.Empty;

    // Filtros
    private string filtroItem = "";
    private string filtroStatus = "";
    private int filtroUsuarioId = 0;
    private int filtroPeriodo = 7;

    // Paginação
    private int paginaAtual = 1;
    private const int itensPorPagina = 10;
    private int totalPaginas = 1;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Iniciando carregamento...");
        try
        {
            await CarregarDados();
            Console.WriteLine($"Pedidos carregados: {pedidos.Count}");
            pedidosFiltrados = pedidos.OrderByDescending(p => p.DataPedido).ToList();
            Console.WriteLine($"Pedidos filtrados: {pedidosFiltrados.Count}");
            totalPaginas = (int)Math.Ceiling((double)pedidosFiltrados.Count / itensPorPagina);
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro ao carregar pedidos: {ex.Message}";
        }
        finally
        {
            carregando = false;
        }
    }

    private async Task CarregarDados()
    {
        pedidos = await PedidoController.ListarTodosPedidos();
        usuariosDisponiveis = await UsuarioController.ListarUsuarios();
    }

    private async Task AplicarFiltros()
    {
        carregando = true;
        StateHasChanged(); // Força atualização visual

        try
        {
            var query = pedidos.AsQueryable();

            if (!string.IsNullOrEmpty(filtroItem))
            {
                query = query.Where(p => p.Item == filtroItem);
            }

            if (!string.IsNullOrEmpty(filtroStatus))
            {
                query = query.Where(p => p.Status == filtroStatus);
            }

            if (filtroUsuarioId > 0)
            {
                query = query.Where(p => p.UsuarioId == filtroUsuarioId);
            }

            if (filtroPeriodo > 0)
            {
                var dataLimite = DateTime.Now.AddDays(-filtroPeriodo);
                query = query.Where(p => p.DataPedido >= dataLimite);
            }

            pedidosFiltrados = query
            .OrderByDescending(p => p.DataPedido)
            .ToList();

            totalPaginas = (int)Math.Ceiling((double)pedidosFiltrados.Count / itensPorPagina);
            paginaAtual = 1;
        }
        finally
        {
            carregando = false;
        }
    }

    private IEnumerable<Pedido> GetPedidosPagina()
    {
        return pedidosFiltrados
        .Skip((paginaAtual - 1) * itensPorPagina)
        .Take(itensPorPagina);
    }

    private void MudarPagina(int pagina)
    {
        paginaAtual = pagina;
    }

    private async Task ConfirmarCancelamento(int pedidoId)
    {
        var confirmado = await JSRuntime.InvokeAsync<bool>("confirm",
        "Tem certeza que deseja cancelar este pedido?");

        if (confirmado)
        {
            await CancelarPedido(pedidoId);
        }
    }

    private async Task CancelarPedido(int pedidoId)
    {
        try
        {
            carregando = true;
            await PedidoController.CancelarPedido(pedidoId);
            await CarregarDados();
            AplicarFiltros();
            mensagemErro = string.Empty;
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro ao cancelar pedido: {ex.Message}";
        }
        finally
        {
            carregando = false;
        }
    }

    private string GetBadgeClass(string status)
    {
        return status switch
        {
            "Pendente" => "badge bg-warning text-dark",
            "Processando" => "badge bg-info text-dark",
            "Enviado" => "badge bg-primary text-dark",
            "Entregue" => "badge bg-success text-dark",
            "Cancelado" => "badge bg-danger text-red",
            _ => "badge bg-secondary text-dark"
        };
    }



}