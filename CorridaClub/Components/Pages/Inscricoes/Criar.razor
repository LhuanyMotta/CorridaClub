@page "/inscricoes/criar"
@rendermode InteractiveServer
@using CorridaClub.Controllers
@using CorridaClub.Models
@inject InscricaoController InscricaoController
@inject EventoController EventoController
@inject UsuarioController UsuarioController
@inject NavigationManager Navigation
@implements IDisposable

<div class="home-container">
    <div class="home-card">
        <div class="header">
            <h1>Nova <span class="highlight">Inscrição</span></h1>
            <p class="subtitle">Preencha os dados abaixo para criar uma nova inscrição</p>
        </div>

        @if (eventos == null || usuarios == null)
        {
            <div class="loading-spinner">
                <div class="spinner"></div>
                <p>Carregando dados...</p>
            </div>
        }
        else
        {
            @if (!string.IsNullOrEmpty(mensagemErro))
            {
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-circle mr-2"></i> @mensagemErro
                </div>
            }

            <div class="form-container">
                <div class="form-row">
                    <div class="form-group">
                        <label>Evento:</label>
                        <select @bind="novaInscricao.EventoId" class="form-control @(erros.ContainsKey("EventoId") ? "is-invalid" : "")">
                            <option value="0">Selecione um evento</option>
                            @foreach (var evento in eventos)
                            {
                                <option value="@evento.Id">@evento.Nome (@evento.Data?.ToString("dd/MM/yyyy"))</option>
                            }
                        </select>
                        @if (erros.ContainsKey("EventoId"))
                        {
                            <div class="invalid-feedback">@erros["EventoId"]</div>
                        }
                    </div>

                    <div class="form-group">
                        <label>Participante:</label>
                        <select @bind="novaInscricao.UsuarioId" class="form-control @(erros.ContainsKey("UsuarioId") ? "is-invalid" : "")">
                            <option value="0">Selecione um participante</option>
                            @foreach (var usuario in usuarios)
                            {
                                <option value="@usuario.Id">@usuario.Nome (@usuario.Email)</option>
                            }
                        </select>
                        @if (erros.ContainsKey("UsuarioId"))
                        {
                            <div class="invalid-feedback">@erros["UsuarioId"]</div>
                        }
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label>Tamanho da Camiseta:</label>
                        <select @bind="novaInscricao.TamanhoCamiseta" class="form-control @(erros.ContainsKey("TamanhoCamiseta") ? "is-invalid" : "")">
                            <option value="">Selecione o tamanho</option>
                            <option value="P">P</option>
                            <option value="M">M</option>
                            <option value="G">G</option>
                            <option value="GG">GG</option>
                        </select>
                        @if (erros.ContainsKey("TamanhoCamiseta"))
                        {
                            <div class="invalid-feedback">@erros["TamanhoCamiseta"]</div>
                        }
                    </div>

                    <div class="form-group">
                        <label>Status:</label>
                        <input type="text" class="form-control" value="Confirmada" disabled />
                    </div>
                </div>

                <div class="action-buttons">
                    @if (!cadastroSucesso)
                    {
                        <button class="action-btn" @onclick="SalvarInscricao" disabled="@salvando">
                            @if (salvando)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span>Salvando...</span>
                            }
                            else
                            {
                                <span class="btn-icon">💾</span>
                                <span class="btn-text">@(erros.Count > 0 ? "Corrija os erros" : "Salvar Inscrição")</span>
                            }
                        </button>
                        <a href="/inscricoes" class="action-btn cancel-btn">
                            <span class="btn-icon">❌</span>
                            <span class="btn-text">Cancelar</span>
                        </a>
                    }
                    else
                    {
                        <div class="success-message">
                            <span class="btn-icon">✅</span>
                            <div>
                                <h4>Sucesso!</h4>
                                <p>Inscrição criada com sucesso.</p>
                            </div>
                        </div>
                        <a href="/inscricoes" class="action-btn">
                            <span class="btn-icon">📋</span>
                            <span class="btn-text">Ver Inscrições</span>
                        </a>
                    }
                </div>
            </div>
        }
    </div>
</div>

<style>

    .home-container {
        background-color: var(--background);
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 2rem 0;
    }

    .home-card {
        background-color: white;
        border-radius: 16px;
        padding: 3rem;
        box-shadow: 0 10px 30px rgba(230, 81, 0, 0.15);
        max-width: 900px;
        width: 100%;
    }

    .header h1 {
        color: var(--primary-color);
        font-size: 2.5rem;
        margin-bottom: 1rem;
        font-weight: 700;
    }

    .highlight {
        color: var(--secondary-color);
        font-weight: 800;
    }

    .subtitle {
        color: var(--text-dark);
        font-size: 1.2rem;
        opacity: 0.9;
        margin-bottom: 2rem;
    }

    .form-container {
        margin-top: 1.5rem;
    }

    .form-row {
        display: flex;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .form-group {
        flex: 1;
        margin-bottom: 1rem;
    }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: var(--text-dark);
        }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 8px;
        font-size: 1rem;
    }

    .is-invalid {
        border-color: #dc3545;
    }

    .invalid-feedback {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .action-buttons {
        display: flex;
        gap: 1.5rem;
        margin-top: 2rem;
        flex-wrap: wrap;
    }

    .action-btn {
        background-color: var(--secondary-color);
        color: white;
        text-decoration: none;
        padding: 1.2rem 1.5rem;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(251, 140, 0, 0.3);
        border: none;
        cursor: pointer;
        min-width: 180px;
    }

        .action-btn:hover {
            background-color: white;
            color: var(--secondary-color);
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(251, 140, 0, 0.4);
            border: 2px solid var(--secondary-color);
        }

    .cancel-btn {
        background-color: #6c757d;
        box-shadow: 0 4px 12px rgba(108, 117, 125, 0.3);
    }

        .cancel-btn:hover {
            background-color: white;
            color: #6c757d;
            border: 2px solid #6c757d;
        }

    .btn-icon {
        font-size: 1.5rem;
        margin-right: 0.8rem;
    }

    .btn-text {
        font-size: 1.1rem;
        font-weight: 600;
    }

    .loading-spinner {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 2rem;
    }

    .spinner {
        border: 4px solid rgba(0, 0, 0, 0.1);
        border-radius: 50%;
        border-top: 4px solid var(--primary-color);
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin-bottom: 1rem;
    }

    .alert-danger {
        padding: 1rem;
        background-color: #f8d7da;
        color: #721c24;
        border-radius: 8px;
        border: 1px solid #f5c6cb;
        margin-bottom: 1rem;
    }

    .success-message {
        display: flex;
        align-items: center;
        background-color: #d4edda;
        color: #155724;
        padding: 1.2rem;
        border-radius: 8px;
        flex: 1;
    }

        .success-message h4 {
            margin-bottom: 0.3rem;
            font-weight: 700;
        }

        .success-message p {
            margin-bottom: 0;
        }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }
</style>

@code {
    private List<Evento> eventos;
    private List<Usuario> usuarios;
    private Inscricao novaInscricao = new();
    private bool cadastroSucesso = false;
    private bool salvando = false;
    private string mensagemErro = string.Empty;
    private Dictionary<string, string> erros = new();
    private DotNetObjectReference<Criar>? objRef;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            eventos = await EventoController.ListarProximosEventos();
            usuarios = await UsuarioController.ListarUsuarios();
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro ao carregar dados: {ex.Message}";
        }
    }

    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    private async Task SalvarInscricao()
    {
        salvando = true;
        erros.Clear();
        mensagemErro = string.Empty;

        ValidarCampos();

        if (erros.Count == 0)
        {
            try
            {
                novaInscricao.DataInscricao = DateTime.Now;
                novaInscricao.Status = "Confirmada";

                await InscricaoController.Inscrever(novaInscricao);
                cadastroSucesso = true;
            }
            catch (Exception ex)
            {
                mensagemErro = $"Erro ao salvar inscrição: {ex.Message}";
            }
        }
        else
        {
            mensagemErro = "Corrija os erros antes de salvar.";
        }

        salvando = false;
        StateHasChanged();
    }

    private void ValidarCampos()
    {
        if (novaInscricao.EventoId == 0)
        {
            erros["EventoId"] = "Selecione um evento.";
        }

        if (novaInscricao.UsuarioId == 0)
        {
            erros["UsuarioId"] = "Selecione um participante.";
        }

        if (string.IsNullOrWhiteSpace(novaInscricao.TamanhoCamiseta))
        {
            erros["TamanhoCamiseta"] = "Selecione o tamanho da camiseta.";
        }
    }
}