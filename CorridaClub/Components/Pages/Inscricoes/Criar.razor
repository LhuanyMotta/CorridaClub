@page "/inscricoes/criar"
@rendermode InteractiveServer
@using CorridaClub.Controllers
@using CorridaClub.Models
@inject InscricaoController InscricaoController
@inject EventoController EventoController
@inject UsuarioController UsuarioController
@inject NavigationManager Navigation

<div class="container">
    <h1 class="my-4 text-primary text-center"><i class="fas fa-file-signature mr-2"></i> NOVA INSCRIÇÃO</h1>
    
    <div class="card shadow">
        <div class="card-body">
            @if (eventos == null || usuarios == null)
            {
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="sr-only">Carregando...</span>
                    </div>
                    <p class="mt-2">Carregando dados...</p>
                </div>
            }
            else
            {
                <!-- Mensagem de erro geral -->
                @if (!string.IsNullOrEmpty(mensagemErro))
                {
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-circle mr-2"></i> @mensagemErro
                    </div>
                }

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="font-weight-bold">Evento:</label>
                            <select @bind="novaInscricao.EventoId" class="form-control @(erros.ContainsKey("EventoId") ? "is-invalid" : "")">
                                <option value="">Selecione um evento</option>
                                @foreach (var evento in eventos)
                                {
                                    <option value="@evento.Id">@evento.Nome (@evento.Data?.ToString("dd/MM/yyyy"))</option>
                                }
                            </select>
                            @if (erros.ContainsKey("EventoId"))
                            {
                                <div class="invalid-feedback">@erros["EventoId"]</div>
                            }
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="font-weight-bold">Participante:</label>
                            <select @bind="novaInscricao.UsuarioId" class="form-control @(erros.ContainsKey("UsuarioId") ? "is-invalid" : "")">
                                <option value="">Selecione um participante</option>
                                @foreach (var usuario in usuarios)
                                {
                                    <option value="@usuario.Id">@usuario.Nome (@usuario.Email)</option>
                                }
                            </select>
                            @if (erros.ContainsKey("UsuarioId"))
                            {
                                <div class="invalid-feedback">@erros["UsuarioId"]</div>
                            }
                        </div>
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="font-weight-bold">Tamanho da Camiseta:</label>
                            <select @bind="novaInscricao.TamanhoCamiseta" class="form-control @(erros.ContainsKey("TamanhoCamiseta") ? "is-invalid" : "")">
                                <option value="">Selecione o tamanho</option>
                                <option value="P">P</option>
                                <option value="M">M</option>
                                <option value="G">G</option>
                                <option value="GG">GG</option>
                            </select>
                            @if (erros.ContainsKey("TamanhoCamiseta"))
                            {
                                <div class="invalid-feedback">@erros["TamanhoCamiseta"]</div>
                            }
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="font-weight-bold">Status:</label>
                            <input type="text" class="form-control" value="Confirmada" disabled />
                        </div>
                    </div>
                </div>

                <div class="mt-4 d-flex">
                    <button class="btn btn-primary mr-2" @onclick="SalvarInscricao" disabled="@salvando">
                        @if (salvando)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="ml-2">Salvando...</span>
                        }
                        else
                        {
                            <i class="fas fa-save mr-1"></i> <span>Salvar Inscrição</span>
                        }
                    </button>
                    <a href="/inscricoes" class="btn btn-outline-secondary">
                        <i class="fas fa-times mr-1"></i> <span>Cancelar</span>
                    </a>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Evento> eventos;
    private List<Usuario> usuarios;
    private Inscricao novaInscricao = new();
    private bool salvando = false;
    private string mensagemErro = string.Empty;
    private Dictionary<string, string> erros = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            eventos = await EventoController.ListarProximosEventos();
            usuarios = await UsuarioController.ListarUsuarios();
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro ao carregar dados: {ex.Message}";
        }
    }

    private async Task SalvarInscricao()
    {
        salvando = true;
        erros.Clear();
        mensagemErro = string.Empty;
        
        // Validações
        ValidarCampos();

        if (erros.Count == 0)
        {
            try
            {
                novaInscricao.DataInscricao = DateTime.Now;
                novaInscricao.Status = "Confirmada";
                
                await InscricaoController.Inscrever(novaInscricao);
                Navigation.NavigateTo("/inscricoes");
            }
            catch (Exception ex)
            {
                mensagemErro = $"Erro ao salvar inscrição: {ex.Message}";
                Console.WriteLine(mensagemErro);
            }
        }
        else
        {
            mensagemErro = "Corrija os erros antes de salvar.";
        }

        salvando = false;
        StateHasChanged();
    }

    private void ValidarCampos()
    {
        // Validação do Evento
        if (novaInscricao.EventoId == 0)
        {
            erros["EventoId"] = "Selecione um evento.";
        }

        // Validação do Participante
        if (novaInscricao.UsuarioId == 0)
        {
            erros["UsuarioId"] = "Selecione um participante.";
        }

        // Validação do Tamanho da Camiseta
        if (string.IsNullOrWhiteSpace(novaInscricao.TamanhoCamiseta))
        {
            erros["TamanhoCamiseta"] = "Selecione o tamanho da camiseta.";
        }
    }
}