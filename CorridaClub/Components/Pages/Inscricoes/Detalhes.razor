@page "/inscricoes/detalhes/{id:int}"
@using CorridaClub.Controllers
@using CorridaClub.Models
@inject InscricaoController InscricaoController
@inject NavigationManager Navigation

<div class="home-container">
    <div class="home-card">
        <div class="header">
            <h1>Detalhes da <span class="highlight">Inscrição</span></h1>
            <p class="subtitle">Visualize as informações completas desta inscrição</p>
        </div>

        @if (carregando)
        {
            <div class="loading-spinner">
                <div class="spinner"></div>
                <p>Carregando inscrição...</p>
            </div>
        }
        else if (inscricao == null)
        {
            <div class="alert-error">
                <span class="alert-icon">⚠️</span>
                <span>Inscrição não encontrada!</span>
            </div>
        }
        else
        {
            <div class="detail-container">
                <div class="detail-row">
                    <div class="detail-group">
                        <label>Evento:</label>
                        <p>@inscricao.Evento?.Nome</p>
                    </div>
                    <div class="detail-group">
                        <label>Participante:</label>
                        <p>@inscricao.Usuario?.Nome</p>
                    </div>
                </div>

                <div class="detail-row">
                    <div class="detail-group">
                        <label>Email:</label>
                        <p>@inscricao.Usuario?.Email</p>
                    </div>
                    <div class="detail-group">
                        <label>Data da Inscrição:</label>
                        <p>@inscricao.DataInscricao?.ToString("dd/MM/yyyy HH:mm")</p>
                    </div>
                </div>

                <div class="detail-row">
                    <div class="detail-group">
                        <label>Status:</label>
                        <p>
                            <span class="status-badge @GetBadgeClass(inscricao.Status)">
                                @GetStatusText(inscricao.Status)
                            </span>
                        </p>
                    </div>
                    <div class="detail-group">
                        <label>Tamanho da Camiseta:</label>
                        <p>@inscricao.TamanhoCamiseta</p>
                    </div>
                </div>

                <div class="action-buttons">
                    <button @onclick="(() => CancelarInscricao(inscricao.Id))"
                            class="action-btn danger-btn"
                            disabled="@(inscricao.Status == "Cancelada")">
                        <span class="btn-icon">✖️</span>
                        <span class="btn-text">@(inscricao.Status == "Cancelada" ? "Inscrição Cancelada" : "Cancelar Inscrição")</span>
                    </button>
                    <a href="/inscricoes" class="action-btn cancel-btn">
                        <span class="btn-icon">⬅️</span>
                        <span class="btn-text">Voltar</span>
                    </a>
                </div>
            </div>
        }
    </div>
</div>

<style>
    :root {
        --primary-color: #E65100;
        --secondary-color: #FB8C00;
        --background: #f8f9fa;
        --text-dark: #333333;
        --text-light: #ffffff;
        --error-bg: #FFF3F3;
        --error-text: #DC3545;
        --success-bg: #E8F5E9;
        --success-text: #28A745;
        --warning-bg: #FFF8E1;
        --warning-text: #FFC107;
    }

    .home-container {
        background-color: var(--background);
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 2rem;
        min-height: 100vh;
    }

    .home-card {
        background-color: white;
        border-radius: 16px;
        padding: 3rem;
        box-shadow: 0 10px 30px rgba(230, 81, 0, 0.15);
        width: 100%;
        max-width: 900px;
    }

    .header h1 {
        color: var(--primary-color);
        font-size: 2.5rem;
        margin-bottom: 0.5rem;
    }

    .highlight {
        color: var(--secondary-color);
        font-weight: 800;
    }

    .subtitle {
        color: var(--text-dark);
        font-size: 1.2rem;
        margin-bottom: 2rem;
        opacity: 0.9;
    }

    .loading-spinner {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 2rem;
    }

    .spinner {
        border: 4px solid rgba(0, 0, 0, 0.1);
        border-radius: 50%;
        border-top: 4px solid var(--primary-color);
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin-bottom: 1rem;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .alert-error {
        display: flex;
        align-items: center;
        padding: 1rem;
        background-color: var(--error-bg);
        color: var(--error-text);
        border-radius: 8px;
        margin: 1rem 0;
    }

    .alert-icon {
        margin-right: 0.5rem;
        font-size: 1.2rem;
    }

    .detail-container {
        margin-top: 1.5rem;
    }

    .detail-row {
        display: flex;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .detail-group {
        flex: 1;
    }

        .detail-group label {
            display: block;
            font-weight: 600;
            color: var(--text-dark);
            margin-bottom: 0.5rem;
        }

        .detail-group p {
            background-color: #f8f9fa;
            padding: 0.75rem;
            border-radius: 8px;
            margin: 0;
        }

    .status-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.875rem;
        font-weight: 600;
    }

    .badge-success {
        background-color: var(--success-bg);
        color: var(--success-text);
    }

    .badge-danger {
        background-color: var(--error-bg);
        color: var(--error-text);
    }

    .badge-warning {
        background-color: var(--warning-bg);
        color: var(--warning-text);
    }

    .badge-secondary {
        background-color: #e9ecef;
        color: #495057;
    }

    .action-buttons {
        display: flex;
        gap: 1.5rem;
        margin-top: 2rem;
    }

    .action-btn {
        background-color: var(--secondary-color);
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 12px;
        display: flex;
        align-items: center;
        text-decoration: none;
        transition: all 0.3s;
        box-shadow: 0 4px 12px rgba(251, 140, 0, 0.3);
        border: none;
        cursor: pointer;
        font-size: 1rem;
    }

        .action-btn:hover {
            background-color: white;
            color: var(--secondary-color);
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(251, 140, 0, 0.4);
            border: 2px solid var(--secondary-color);
        }

        .action-btn:disabled {
            background-color: #cccccc;
            color: #666666;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
            border: none;
        }

    .danger-btn {
        background-color: #dc3545;
        box-shadow: 0 4px 12px rgba(220, 53, 69, 0.3);
    }

        .danger-btn:hover {
            background-color: white;
            color: #dc3545;
            border: 2px solid #dc3545;
        }

    .cancel-btn {
        background-color: #6c757d;
        box-shadow: 0 4px 12px rgba(108, 117, 125, 0.3);
    }

        .cancel-btn:hover {
            background-color: white;
            color: #6c757d;
            border: 2px solid #6c757d;
        }

    .btn-icon {
        margin-right: 0.5rem;
        font-size: 1.2rem;
    }
</style>

@code {
    [Parameter]
    public int Id { get; set; }

    private Inscricao? inscricao;
    private bool carregando = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            inscricao = await InscricaoController.ObterInscricaoCompleta(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar inscrição: {ex.Message}");
        }
        finally
        {
            carregando = false;
        }
    }

    private async Task CancelarInscricao(int id)
    {
        try
        {
            await InscricaoController.CancelarInscricao(id);
            // Atualiza os dados após cancelamento
            inscricao = await InscricaoController.ObterInscricaoCompleta(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao cancelar inscrição: {ex.Message}");
        }
    }

    private string GetBadgeClass(string status)
    {
        return status switch
        {
            "Confirmada" => "badge-success",
            "Cancelada" => "badge-danger",
            "Pendente" => "badge-warning",
            _ => "badge-secondary"
        };
    }

    private string GetStatusText(string status)
    {
        return status switch
        {
            "Confirmada" => "CONFIRMADA",
            "Cancelada" => "CANCELADA",
            "Pendente" => "PENDENTE",
            _ => status?.ToUpper() ?? "INDEFINIDO"
        };
    }
}