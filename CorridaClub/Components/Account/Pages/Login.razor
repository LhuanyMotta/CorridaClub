@page "/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using CorridaClub.Data

@inject SignInManager<CorridaClubUser> SignInManager
@inject NavigationManager NavigationManager
@inject ILogger<Login> Logger
@inject IdentityRedirectManager RedirectManager

<PageTitle>Login</PageTitle>

<h1>Login</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" OnValidSubmit="LoginUser">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" placeholder="Email" />
                <label>Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" placeholder="Senha" />
                <label>Senha</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <div class="checkbox mb-3">
                <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                <label class="form-check-label">Lembrar de mim</label>
            </div>

            <button type="submit" class="w-100 btn btn-lg btn-primary">Entrar</button>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    private InputModel Input { get; set; } = new();

    private string? Message => identityErrors is null ? null : $"Erro: {string.Join(", ", identityErrors.Select(e => e.Description))}";

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("Usuário logado com sucesso.");
            RedirectManager.RedirectTo("/");
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("Conta bloqueada.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Logger.LogWarning("Tentativa de login inválida.");
            identityErrors = new List<IdentityError>
            {
                new IdentityError { Description = "Login inválido. Verifique o email e a senha." }
            };
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; } = false;
    }
}
